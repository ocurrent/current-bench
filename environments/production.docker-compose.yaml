version: "3.8"
services:
  db:
    build: ../pipeline/postgres
    environment:
      - POSTGRES_DB=docker
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=${OCAML_BENCH_DB_PASSWORD?required}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker"]
      interval: 5s
      timeout: 5s
      retries: 3
    ports: ["5432:5432"]
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    expose: ["5432"]
    cpuset: "${OCAML_BENCH_PLATFORM_CPUSET}"
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
    ports:
      - "${OCAML_BENCH_GRAPHQL_PORT?required}:${OCAML_BENCH_GRAPHQL_PORT?required}"
    depends_on:
      db:
        condition: service_healthy
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://docker:docker@db:5432/docker
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${OCAML_BENCH_GRAPHQL_KEY?required}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "public"
    volumes:
      - ../hasura-server/metadata:/hasura-metadata
    cpuset: "${OCAML_BENCH_PLATFORM_CPUSET}"
  frontend:
    build:
      context: ..
      dockerfile: ./frontend/Dockerfile
      args:
        VITE_OCAML_BENCH_PIPELINE_URL: "${OCAML_BENCH_PIPELINE_URL?required}"
        VITE_OCAML_BENCH_GRAPHQL_URL: "${OCAML_BENCH_GRAPHQL_URL?required}"
        VITE_CURRENT_BENCH_VERSION: "${CURRENT_BENCH_VERSION?required}"
    ports:
      - "8082:${OCAML_BENCH_FRONTEND_PORT?required}"
    restart: always
    depends_on:
      - "graphql-engine"
    cpuset: "${OCAML_BENCH_PLATFORM_CPUSET}"
  pipeline:
    build:
      context: ..
      dockerfile: ./pipeline/Dockerfile
      args:
        TARGET_ARCH: ${OCAML_BENCH_TARGET_ARCH?required}
    volumes:
      - current-bench-data:/app/current-bench-data:ro
      - pipeline_var:/app/var
      - /var/run/docker.sock:/var/run/docker.sock
      - ../capnp-secrets:/app/capnp-secrets
    ports:
      [
        "${OCAML_BENCH_PIPELINE_PORT?required}:${OCAML_BENCH_PIPELINE_PORT?required}",
      ]
    command:
      - "/app/entrypoint.sh"
      - "/app/bin/current-bench-pipeline"
      - "--verbosity=debug"
      - "--repositories=/app/production.conf"
      - "--port=${OCAML_BENCH_PIPELINE_PORT?required}"
      - "--conn-info=host=db user=docker port=5432 dbname=docker password=${OCAML_BENCH_DB_PASSWORD?required}"
      - "--github-app-id=${OCAML_BENCH_GITHUB_APP_ID}"
      - "--github-account-allowlist=${OCAML_BENCH_GITHUB_ACCOUNT_ALLOW_LIST?required}"
      - "--github-private-key-file=${OCAML_BENCH_GITHUB_PRIVATE_KEY_FILE?required}"
      - "--github-webhook-secret-file=${OCAML_BENCH_GITHUB_WEBHOOK_SECRET_FILE?required}"
    restart: always
    depends_on:
      db:
        condition: service_healthy
      cluster:
        condition: service_started
    environment:
      OCAML_BENCH_FRONTEND_URL: ${OCAML_BENCH_FRONTEND_URL?required}
      OCAML_BENCH_DB_PASSWORD: ${OCAML_BENCH_DB_PASSWORD?required}
  cluster:
    build:
      context: ../cluster
    command:
      - "--capnp-secret-key-file=./capnp-secrets/key.pem"
      - "--capnp-listen-address=tcp:0.0.0.0:${OCAML_BENCH_CLUSTER_PORT?required}"
      - "--capnp-public-address=tcp:cluster:${OCAML_BENCH_CLUSTER_PORT?required}"
      - "--state-dir=/var/lib/ocluster-scheduler"
      - "--pools=${OCAML_BENCH_CLUSTER_POOLS}"
      - "--verbose"
    ports: ["${OCAML_BENCH_CLUSTER_PORT?required}:${OCAML_BENCH_CLUSTER_PORT?required}"]
    volumes:
      # Allow access to capnp secrets required by client and workers
      - ../capnp-secrets:/var/lib/ocluster-scheduler/capnp-secrets
  worker:
    build:
      context: ../worker
    restart: always
    command:
      - "cb_worker.exe"
      - "--name=development-worker"
      - "--state-dir=/app/state"
      - "--ocluster-pool=./capnp-secrets/pool-autumn.cap"
      - "--docker-cpu=${OCAML_BENCH_DOCKER_CPU?required}"
    volumes:
      - ../capnp-secrets:/app/capnp-secrets
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      pipeline:
        condition: service_started
      cluster:
        condition: service_started
    cpuset: "${OCAML_BENCH_PLATFORM_CPUSET}"

volumes:
  db_data:
  pipeline_var:
  current-bench-data:
    external: true
